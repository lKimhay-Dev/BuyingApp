{"version":3,"file":"auth.js","sources":["../../../../src/auth/auth.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,oBAAoB,EAAE,yBAAyB,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,cAAc,CAAC;;AAI3H,MAAM;AACN,IA4BE,YACgC,SACiB,cAC1B,YACb,IAAY;AACrB,QADS,SAAI,GAAJ,IAAI,CAAQ;AACxB,QACI,MAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAClE,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE;AAC5C,YAAM,MAAM,GAAG,GAAG,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;AAC7D,YAAM,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AACxB,SAAK,CAAC,CAAC;AACP,QACI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,sBAAsB,CAC/C,SAAS,CAAC,iBAAiB,CACzB,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;AACpC,YAAU,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;AACvE,YAAU,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC;AACjC,SAAS,CAAC,CACH,CACF,CAAC;AACN,QACI,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,sBAAsB,CAC1C,SAAS,CAAC,iBAAiB,CACzB,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;AACpC,YAAU,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACrE,YAAU,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC;AACjC,SAAS,CAAC,CACH,CACF,CAAC;AACN,QACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;AACnD,YAAM,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;AACtD,SAAK,CAAC,CAAC,CAAC;AACR,QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;AACzD,YAAM,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;AAC5D,SAAK,CAAC,CAAC,CAAC;AACR,KAAG;AACH;2CApEC,UAAU;6GACR;AAAC;AAGG,4CA2BF,MAAM,SAAC,oBAAoB;AAAU,4CACrC,QAAQ,YAAI,MAAM,SAAC,yBAAyB;AAAU,yCACtD,MAAM,SAAC,WAAW;AAAU,YAxCM,MAAM;AAAK;;;;;;;;;;;;;;2DAAE;AAAC","sourcesContent":["import { FirebaseAuth, User, IdTokenResult } from '@firebase/auth-types';\nimport { FirebaseOptions, FirebaseAppConfig } from '@firebase/app-types';\nimport { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { FirebaseOptionsToken, FirebaseNameOrConfigToken, _firebaseAppFactory, FirebaseZoneScheduler } from 'angularfire2';\n\n\n@Injectable()\nexport class AngularFireAuth {\n\n  /**\n   * Firebase Auth instance\n   */\n  public readonly auth: FirebaseAuth;\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<IdTokenResult|null>;\n\n  constructor(\n    @Inject(FirebaseOptionsToken) options:FirebaseOptions,\n    @Optional() @Inject(FirebaseNameOrConfigToken) nameOrConfig:string|FirebaseAppConfig|undefined,\n    @Inject(PLATFORM_ID) platformId: Object,\n    private zone: NgZone\n  ) {\n    const scheduler = new FirebaseZoneScheduler(zone, platformId);\n    this.auth = zone.runOutsideAngular(() => {\n      const app = _firebaseAppFactory(options, nameOrConfig);\n      return app.auth();\n    });\n\n    this.authState = scheduler.keepUnstableUntilFirst(\n      scheduler.runOutsideAngular(\n        new Observable(subscriber => {\n          const unsubscribe = this.auth.onAuthStateChanged(subscriber);\n          return { unsubscribe };\n        })\n      )\n    );\n\n    this.user = scheduler.keepUnstableUntilFirst(\n      scheduler.runOutsideAngular(\n        new Observable(subscriber => {\n          const unsubscribe = this.auth.onIdTokenChanged(subscriber);\n          return { unsubscribe };\n        })\n      )\n    );\n\n    this.idToken = this.user.pipe(switchMap(user => {\n      return user ? from(user.getIdToken()) : of(null)\n    }));\n\n    this.idTokenResult = this.user.pipe(switchMap(user => {\n      return user ? from(user.getIdTokenResult()) : of(null)\n    }));\n  }\n\n}\n"]}